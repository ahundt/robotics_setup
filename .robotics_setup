# for bash and zsh
# https://github.com/ahundt/robotics_setup
# Loads configuration of installed utilities
# while skipping things that aren't set up

# ROS.org Robot Operating System
# version: kinetic
if [ -d /opt/ros/kinetic ] ; then
  source /opt/ros/kinetic/setup.zsh
fi

# ROS.org Robot Operating System
# version: indigo
if [ -d /opt/ros/indigo ] ; then
  source /opt/ros/indigo/setup.zsh
fi


# byobu shell session manager installed from source
# see byobu-source.sh
if [ -d $HOME/byobu/bin ] ; then
  export PATH=$HOME/byobu/bin:$PATH
fi

# costar_ws https://github.com/cpaxton/costar_stack
# see costar.sh
if [ -d ~/src/costar_ws ] ; then
  if [ -d /opt/ros ] ; then
    test -e "$HOME/src/costar_ws/devel/setup.zsh" && source "$HOME/src/costar_ws/devel/setup.zsh"
  fi
fi

# linuxbrew http://linuxbrew.sh/
if [ -d $HOME/.linuxbrew ]; then
  export PATH="$HOME/.linuxbrew/bin:$PATH"
  export MANPATH="$HOME/.linuxbrew/share/man:$MANPATH"
  export INFOPATH="$HOME/.linuxbrew/share/info:$INFOPATH"
  export PATH="$HOME/.linuxbrew/sbin:$PATH"
fi

# check for homebrew https://brew.sh
# and make its binaries first on PATH
which -s brew > /dev/null
if [[ $? == 0 ]] ; then
  brew_path=`brew --prefix`
  export PATH="${brew_path}/bin:$PATH"

  # Check for brewed python https://docs.brew.sh/Homebrew-and-Python.html,
  # and if it is found make it the first python on the PATH
  brew ls --versions python > /dev/null
  if [[ $? == 0 ]] ; then
    # add homebrew python to the path
    export PATH="${brew_path}/opt/python/libexec/bin:$PATH"
  fi
fi

# nvidia cuda gpu compiler
if [ -d /usr/local/cuda ] ; then
  export PATH=$PATH:/usr/local/cuda/bin
fi

# golang aka google go
# https://golang.org/
# https://github.com/golang/go/wiki/Ubuntu
if [ -d $HOME/go ] ; then
  export GOPATH=$HOME/go
  export PATH=$PATH:$GOPATH/bin
fi

# github.com/cfinn/gps
if [ -d ~/src/gps ] ; then
  # load libraries for guided_policy_search.sh
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/src/gps/build/lib
  export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:$HOME/src/gps/build/lib
  export PYTHONPATH=$PYTHONPATH:$HOME/src/gps/build/lib
fi

if [ -d /usr/local/cuda ] ; then
   # for tensorflow.sh build
   # see https://github.com/tensorflow/tensorflow/issues/15142#issuecomment-352773470
   export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda:/usr/local/cuda/lib64:/usr/local/cuda/lib64/stubs
fi

# github.com/tensorflow/models
if [ -d ~/src/tf_models ] ; then
  # load libraries for tensorflow object detection api
  export PYTHONPATH=$PYTHONPATH:$HOME/src/tf_models/research/:$HOME/src/tf_models/research/slim
fi

# locally installed libraries
if [ -d $HOME/lib ] ; then
  # load libraries and programs installed locally
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/lib
  export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:$HOME/lib
  export PYTHONPATH=$PYTHONPATH:$HOME/lib
fi

# locally installed binaries
if [ -d $HOME/bin ] ; then
  export PATH=$PATH:$HOME/bin
fi

# pip installs user packages here, for example:
# pip3 install numpy --upgrade --user
# https://docs.python.org/3/using/cmdline.html#envvar-PYTHONUSERBASE
if [ -d $HOME/.local/bin ] ; then
  export PATH=$HOME/.local/bin:$PATH
fi

# pip installs user packages here, for example:
# pip3 install numpy --upgrade --user
if [ -d $HOME/.local ] ; then
  export PYTHONUSERBASE=$HOME/.local/
fi

# locally installed python libraries
if [ -d $HOME/.local/lib ] ; then
  # load python libraries and programs installed locally
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/.local/lib
  export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:$HOME/.local/lib
  export PYTHONPATH=$PYTHONPATH:$HOME/.local/lib
fi

# locally installed python binaries
if [ -d $HOME/.local/bin ] ; then
  export PATH=$PATH:$HOME/.local/bin
fi

# autoenv for automatic environment variable loading
# on a per project basis (overrides cd)
#
# DEPRECATED
#
# if [ -d ~/.autoenv ] ; then
#   source ~/.autoenv/activate.sh
# fi


# Check if we are running on a SLURM supercomputer cluster
if [ -x "$(command -v srun)" ] ; then
  # based on http://stackoverflow.com/a/26759734/99379
  source ~/src/robotics_setup/marcc-config.sh
fi


if [ -d ~/src/hub ] ; then
  # shell completions for https://github.com/hub
  # https://github.com/github/hub/tree/master/etc
  eval "$(hub alias -s)"
  fpath=(~/.zsh/completions $fpath)
  autoload -U compinit && compinit
fi


# http://sourabhbajaj.com/mac-setup/iTerm/zsh.html
# Add env.sh
if [ -f ~/Projects/config/env.sh ] ; then
    source ~/Projects/config/env.sh
fi


# https://www.iterm2.com/documentation-shell-integration.html
if [ -f ~/.iterm2_shell_integration.zsh ] ; then
   test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
elif [ -f ~/.iterm2_shell_integration.bash ] ; then
   test -e "${HOME}/.iterm2_shell_integration.bash" && source "${HOME}/.iterm2_shell_integration.bash"
fi


# https://www.iterm2.com/documentation-shell-integration.html
# add access to iterm2 imgcat and other utilities
if [ -d $HOME/.iterm2 ] ; then
  export PATH="$PATH:$HOME/.iterm2"
fi